// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i homework-1/internal/app/product.ProductValidator -o product_service_mock.go -n ProductValidatorMock -p mock

import (
	"homework-1/internal/pkg/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductValidatorMock implements mm_product.ProductValidator
type ProductValidatorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcValidateProduct          func(sku uint32) (pp1 *model.ProductResponse, err error)
	funcValidateProductOrigin    string
	inspectFuncValidateProduct   func(sku uint32)
	afterValidateProductCounter  uint64
	beforeValidateProductCounter uint64
	ValidateProductMock          mProductValidatorMockValidateProduct
	ValidateProductFunc          func(sku uint32) (*model.ProductResponse, error)
}

// NewProductValidatorMock returns a mock for mm_product.ProductValidator
func NewProductValidatorMock(t minimock.Tester) *ProductValidatorMock {
	m := &ProductValidatorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ValidateProductMock = mProductValidatorMockValidateProduct{mock: m}
	m.ValidateProductMock.callArgs = []*ProductValidatorMockValidateProductParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductValidatorMockValidateProduct struct {
	optional           bool
	mock               *ProductValidatorMock
	defaultExpectation *ProductValidatorMockValidateProductExpectation
	expectations       []*ProductValidatorMockValidateProductExpectation

	callArgs []*ProductValidatorMockValidateProductParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductValidatorMockValidateProductExpectation specifies expectation struct of the ProductValidator.ValidateProduct
type ProductValidatorMockValidateProductExpectation struct {
	mock               *ProductValidatorMock
	params             *ProductValidatorMockValidateProductParams
	paramPtrs          *ProductValidatorMockValidateProductParamPtrs
	expectationOrigins ProductValidatorMockValidateProductExpectationOrigins
	results            *ProductValidatorMockValidateProductResults
	returnOrigin       string
	Counter            uint64
}

// ProductValidatorMockValidateProductParams contains parameters of the ProductValidator.ValidateProduct
type ProductValidatorMockValidateProductParams struct {
	sku uint32
}

// ProductValidatorMockValidateProductParamPtrs contains pointers to parameters of the ProductValidator.ValidateProduct
type ProductValidatorMockValidateProductParamPtrs struct {
	sku *uint32
}

// ProductValidatorMockValidateProductResults contains results of the ProductValidator.ValidateProduct
type ProductValidatorMockValidateProductResults struct {
	pp1 *model.ProductResponse
	err error
}

// ProductValidatorMockValidateProductOrigins contains origins of expectations of the ProductValidator.ValidateProduct
type ProductValidatorMockValidateProductExpectationOrigins struct {
	origin    string
	originSku string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidateProduct *mProductValidatorMockValidateProduct) Optional() *mProductValidatorMockValidateProduct {
	mmValidateProduct.optional = true
	return mmValidateProduct
}

// Expect sets up expected params for ProductValidator.ValidateProduct
func (mmValidateProduct *mProductValidatorMockValidateProduct) Expect(sku uint32) *mProductValidatorMockValidateProduct {
	if mmValidateProduct.mock.funcValidateProduct != nil {
		mmValidateProduct.mock.t.Fatalf("ProductValidatorMock.ValidateProduct mock is already set by Set")
	}

	if mmValidateProduct.defaultExpectation == nil {
		mmValidateProduct.defaultExpectation = &ProductValidatorMockValidateProductExpectation{}
	}

	if mmValidateProduct.defaultExpectation.paramPtrs != nil {
		mmValidateProduct.mock.t.Fatalf("ProductValidatorMock.ValidateProduct mock is already set by ExpectParams functions")
	}

	mmValidateProduct.defaultExpectation.params = &ProductValidatorMockValidateProductParams{sku}
	mmValidateProduct.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidateProduct.expectations {
		if minimock.Equal(e.params, mmValidateProduct.defaultExpectation.params) {
			mmValidateProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateProduct.defaultExpectation.params)
		}
	}

	return mmValidateProduct
}

// ExpectSkuParam1 sets up expected param sku for ProductValidator.ValidateProduct
func (mmValidateProduct *mProductValidatorMockValidateProduct) ExpectSkuParam1(sku uint32) *mProductValidatorMockValidateProduct {
	if mmValidateProduct.mock.funcValidateProduct != nil {
		mmValidateProduct.mock.t.Fatalf("ProductValidatorMock.ValidateProduct mock is already set by Set")
	}

	if mmValidateProduct.defaultExpectation == nil {
		mmValidateProduct.defaultExpectation = &ProductValidatorMockValidateProductExpectation{}
	}

	if mmValidateProduct.defaultExpectation.params != nil {
		mmValidateProduct.mock.t.Fatalf("ProductValidatorMock.ValidateProduct mock is already set by Expect")
	}

	if mmValidateProduct.defaultExpectation.paramPtrs == nil {
		mmValidateProduct.defaultExpectation.paramPtrs = &ProductValidatorMockValidateProductParamPtrs{}
	}
	mmValidateProduct.defaultExpectation.paramPtrs.sku = &sku
	mmValidateProduct.defaultExpectation.expectationOrigins.originSku = minimock.CallerInfo(1)

	return mmValidateProduct
}

// Inspect accepts an inspector function that has same arguments as the ProductValidator.ValidateProduct
func (mmValidateProduct *mProductValidatorMockValidateProduct) Inspect(f func(sku uint32)) *mProductValidatorMockValidateProduct {
	if mmValidateProduct.mock.inspectFuncValidateProduct != nil {
		mmValidateProduct.mock.t.Fatalf("Inspect function is already set for ProductValidatorMock.ValidateProduct")
	}

	mmValidateProduct.mock.inspectFuncValidateProduct = f

	return mmValidateProduct
}

// Return sets up results that will be returned by ProductValidator.ValidateProduct
func (mmValidateProduct *mProductValidatorMockValidateProduct) Return(pp1 *model.ProductResponse, err error) *ProductValidatorMock {
	if mmValidateProduct.mock.funcValidateProduct != nil {
		mmValidateProduct.mock.t.Fatalf("ProductValidatorMock.ValidateProduct mock is already set by Set")
	}

	if mmValidateProduct.defaultExpectation == nil {
		mmValidateProduct.defaultExpectation = &ProductValidatorMockValidateProductExpectation{mock: mmValidateProduct.mock}
	}
	mmValidateProduct.defaultExpectation.results = &ProductValidatorMockValidateProductResults{pp1, err}
	mmValidateProduct.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidateProduct.mock
}

// Set uses given function f to mock the ProductValidator.ValidateProduct method
func (mmValidateProduct *mProductValidatorMockValidateProduct) Set(f func(sku uint32) (pp1 *model.ProductResponse, err error)) *ProductValidatorMock {
	if mmValidateProduct.defaultExpectation != nil {
		mmValidateProduct.mock.t.Fatalf("Default expectation is already set for the ProductValidator.ValidateProduct method")
	}

	if len(mmValidateProduct.expectations) > 0 {
		mmValidateProduct.mock.t.Fatalf("Some expectations are already set for the ProductValidator.ValidateProduct method")
	}

	mmValidateProduct.mock.funcValidateProduct = f
	mmValidateProduct.mock.funcValidateProductOrigin = minimock.CallerInfo(1)
	return mmValidateProduct.mock
}

// When sets expectation for the ProductValidator.ValidateProduct which will trigger the result defined by the following
// Then helper
func (mmValidateProduct *mProductValidatorMockValidateProduct) When(sku uint32) *ProductValidatorMockValidateProductExpectation {
	if mmValidateProduct.mock.funcValidateProduct != nil {
		mmValidateProduct.mock.t.Fatalf("ProductValidatorMock.ValidateProduct mock is already set by Set")
	}

	expectation := &ProductValidatorMockValidateProductExpectation{
		mock:               mmValidateProduct.mock,
		params:             &ProductValidatorMockValidateProductParams{sku},
		expectationOrigins: ProductValidatorMockValidateProductExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidateProduct.expectations = append(mmValidateProduct.expectations, expectation)
	return expectation
}

// Then sets up ProductValidator.ValidateProduct return parameters for the expectation previously defined by the When method
func (e *ProductValidatorMockValidateProductExpectation) Then(pp1 *model.ProductResponse, err error) *ProductValidatorMock {
	e.results = &ProductValidatorMockValidateProductResults{pp1, err}
	return e.mock
}

// Times sets number of times ProductValidator.ValidateProduct should be invoked
func (mmValidateProduct *mProductValidatorMockValidateProduct) Times(n uint64) *mProductValidatorMockValidateProduct {
	if n == 0 {
		mmValidateProduct.mock.t.Fatalf("Times of ProductValidatorMock.ValidateProduct mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidateProduct.expectedInvocations, n)
	mmValidateProduct.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidateProduct
}

func (mmValidateProduct *mProductValidatorMockValidateProduct) invocationsDone() bool {
	if len(mmValidateProduct.expectations) == 0 && mmValidateProduct.defaultExpectation == nil && mmValidateProduct.mock.funcValidateProduct == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidateProduct.mock.afterValidateProductCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidateProduct.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ValidateProduct implements mm_product.ProductValidator
func (mmValidateProduct *ProductValidatorMock) ValidateProduct(sku uint32) (pp1 *model.ProductResponse, err error) {
	mm_atomic.AddUint64(&mmValidateProduct.beforeValidateProductCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateProduct.afterValidateProductCounter, 1)

	mmValidateProduct.t.Helper()

	if mmValidateProduct.inspectFuncValidateProduct != nil {
		mmValidateProduct.inspectFuncValidateProduct(sku)
	}

	mm_params := ProductValidatorMockValidateProductParams{sku}

	// Record call args
	mmValidateProduct.ValidateProductMock.mutex.Lock()
	mmValidateProduct.ValidateProductMock.callArgs = append(mmValidateProduct.ValidateProductMock.callArgs, &mm_params)
	mmValidateProduct.ValidateProductMock.mutex.Unlock()

	for _, e := range mmValidateProduct.ValidateProductMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmValidateProduct.ValidateProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateProduct.ValidateProductMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateProduct.ValidateProductMock.defaultExpectation.params
		mm_want_ptrs := mmValidateProduct.ValidateProductMock.defaultExpectation.paramPtrs

		mm_got := ProductValidatorMockValidateProductParams{sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmValidateProduct.t.Errorf("ProductValidatorMock.ValidateProduct got unexpected parameter sku, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateProduct.ValidateProductMock.defaultExpectation.expectationOrigins.originSku, *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateProduct.t.Errorf("ProductValidatorMock.ValidateProduct got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidateProduct.ValidateProductMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateProduct.ValidateProductMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateProduct.t.Fatal("No results are set for the ProductValidatorMock.ValidateProduct")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmValidateProduct.funcValidateProduct != nil {
		return mmValidateProduct.funcValidateProduct(sku)
	}
	mmValidateProduct.t.Fatalf("Unexpected call to ProductValidatorMock.ValidateProduct. %v", sku)
	return
}

// ValidateProductAfterCounter returns a count of finished ProductValidatorMock.ValidateProduct invocations
func (mmValidateProduct *ProductValidatorMock) ValidateProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateProduct.afterValidateProductCounter)
}

// ValidateProductBeforeCounter returns a count of ProductValidatorMock.ValidateProduct invocations
func (mmValidateProduct *ProductValidatorMock) ValidateProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateProduct.beforeValidateProductCounter)
}

// Calls returns a list of arguments used in each call to ProductValidatorMock.ValidateProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateProduct *mProductValidatorMockValidateProduct) Calls() []*ProductValidatorMockValidateProductParams {
	mmValidateProduct.mutex.RLock()

	argCopy := make([]*ProductValidatorMockValidateProductParams, len(mmValidateProduct.callArgs))
	copy(argCopy, mmValidateProduct.callArgs)

	mmValidateProduct.mutex.RUnlock()

	return argCopy
}

// MinimockValidateProductDone returns true if the count of the ValidateProduct invocations corresponds
// the number of defined expectations
func (m *ProductValidatorMock) MinimockValidateProductDone() bool {
	if m.ValidateProductMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateProductMock.invocationsDone()
}

// MinimockValidateProductInspect logs each unmet expectation
func (m *ProductValidatorMock) MinimockValidateProductInspect() {
	for _, e := range m.ValidateProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductValidatorMock.ValidateProduct at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateProductCounter := mm_atomic.LoadUint64(&m.afterValidateProductCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateProductMock.defaultExpectation != nil && afterValidateProductCounter < 1 {
		if m.ValidateProductMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductValidatorMock.ValidateProduct at\n%s", m.ValidateProductMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductValidatorMock.ValidateProduct at\n%s with params: %#v", m.ValidateProductMock.defaultExpectation.expectationOrigins.origin, *m.ValidateProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateProduct != nil && afterValidateProductCounter < 1 {
		m.t.Errorf("Expected call to ProductValidatorMock.ValidateProduct at\n%s", m.funcValidateProductOrigin)
	}

	if !m.ValidateProductMock.invocationsDone() && afterValidateProductCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductValidatorMock.ValidateProduct at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateProductMock.expectedInvocations), m.ValidateProductMock.expectedInvocationsOrigin, afterValidateProductCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductValidatorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockValidateProductInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductValidatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductValidatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockValidateProductDone()
}
