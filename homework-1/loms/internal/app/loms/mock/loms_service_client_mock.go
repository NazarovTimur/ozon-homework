// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i homework-1/internal/proto/loms.LomsServiceClient -o loms_service_client_mock.go -n LomsServiceClientMock -p mock

import (
	context "context"
	mm_pb "homework-1/api/proto/loms"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	grpc "google.golang.org/grpc"
)

// LomsServiceClientMock implements mm_pb.LomsServiceClient
type LomsServiceClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOrderCancel          func(ctx context.Context, in *mm_pb.OrderCancelRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderCancelResponse, err error)
	funcOrderCancelOrigin    string
	inspectFuncOrderCancel   func(ctx context.Context, in *mm_pb.OrderCancelRequest, opts ...grpc.CallOption)
	afterOrderCancelCounter  uint64
	beforeOrderCancelCounter uint64
	OrderCancelMock          mLomsServiceClientMockOrderCancel

	funcOrderCreate          func(ctx context.Context, in *mm_pb.OrderCreateRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderCreateResponse, err error)
	funcOrderCreateOrigin    string
	inspectFuncOrderCreate   func(ctx context.Context, in *mm_pb.OrderCreateRequest, opts ...grpc.CallOption)
	afterOrderCreateCounter  uint64
	beforeOrderCreateCounter uint64
	OrderCreateMock          mLomsServiceClientMockOrderCreate

	funcOrderInfo          func(ctx context.Context, in *mm_pb.OrderInfoRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderInfoResponse, err error)
	funcOrderInfoOrigin    string
	inspectFuncOrderInfo   func(ctx context.Context, in *mm_pb.OrderInfoRequest, opts ...grpc.CallOption)
	afterOrderInfoCounter  uint64
	beforeOrderInfoCounter uint64
	OrderInfoMock          mLomsServiceClientMockOrderInfo

	funcOrderPay          func(ctx context.Context, in *mm_pb.OrderPayRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderPayResponse, err error)
	funcOrderPayOrigin    string
	inspectFuncOrderPay   func(ctx context.Context, in *mm_pb.OrderPayRequest, opts ...grpc.CallOption)
	afterOrderPayCounter  uint64
	beforeOrderPayCounter uint64
	OrderPayMock          mLomsServiceClientMockOrderPay

	funcStocksInfo          func(ctx context.Context, in *mm_pb.StocksInfoRequest, opts ...grpc.CallOption) (sp1 *mm_pb.StocksInfoResponse, err error)
	funcStocksInfoOrigin    string
	inspectFuncStocksInfo   func(ctx context.Context, in *mm_pb.StocksInfoRequest, opts ...grpc.CallOption)
	afterStocksInfoCounter  uint64
	beforeStocksInfoCounter uint64
	StocksInfoMock          mLomsServiceClientMockStocksInfo
}

// NewLomsServiceClientMock returns a mock for mm_pb.LomsServiceClient
func NewLomsServiceClientMock(t minimock.Tester) *LomsServiceClientMock {
	m := &LomsServiceClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OrderCancelMock = mLomsServiceClientMockOrderCancel{mock: m}
	m.OrderCancelMock.callArgs = []*LomsServiceClientMockOrderCancelParams{}

	m.OrderCreateMock = mLomsServiceClientMockOrderCreate{mock: m}
	m.OrderCreateMock.callArgs = []*LomsServiceClientMockOrderCreateParams{}

	m.OrderInfoMock = mLomsServiceClientMockOrderInfo{mock: m}
	m.OrderInfoMock.callArgs = []*LomsServiceClientMockOrderInfoParams{}

	m.OrderPayMock = mLomsServiceClientMockOrderPay{mock: m}
	m.OrderPayMock.callArgs = []*LomsServiceClientMockOrderPayParams{}

	m.StocksInfoMock = mLomsServiceClientMockStocksInfo{mock: m}
	m.StocksInfoMock.callArgs = []*LomsServiceClientMockStocksInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsServiceClientMockOrderCancel struct {
	optional           bool
	mock               *LomsServiceClientMock
	defaultExpectation *LomsServiceClientMockOrderCancelExpectation
	expectations       []*LomsServiceClientMockOrderCancelExpectation

	callArgs []*LomsServiceClientMockOrderCancelParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceClientMockOrderCancelExpectation specifies expectation struct of the LomsServiceClient.OrderCancel
type LomsServiceClientMockOrderCancelExpectation struct {
	mock               *LomsServiceClientMock
	params             *LomsServiceClientMockOrderCancelParams
	paramPtrs          *LomsServiceClientMockOrderCancelParamPtrs
	expectationOrigins LomsServiceClientMockOrderCancelExpectationOrigins
	results            *LomsServiceClientMockOrderCancelResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceClientMockOrderCancelParams contains parameters of the LomsServiceClient.OrderCancel
type LomsServiceClientMockOrderCancelParams struct {
	ctx  context.Context
	in   *mm_pb.OrderCancelRequest
	opts []grpc.CallOption
}

// LomsServiceClientMockOrderCancelParamPtrs contains pointers to parameters of the LomsServiceClient.OrderCancel
type LomsServiceClientMockOrderCancelParamPtrs struct {
	ctx  *context.Context
	in   **mm_pb.OrderCancelRequest
	opts *[]grpc.CallOption
}

// LomsServiceClientMockOrderCancelResults contains results of the LomsServiceClient.OrderCancel
type LomsServiceClientMockOrderCancelResults struct {
	op1 *mm_pb.OrderCancelResponse
	err error
}

// LomsServiceClientMockOrderCancelOrigins contains origins of expectations of the LomsServiceClient.OrderCancel
type LomsServiceClientMockOrderCancelExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) Optional() *mLomsServiceClientMockOrderCancel {
	mmOrderCancel.optional = true
	return mmOrderCancel
}

// Expect sets up expected params for LomsServiceClient.OrderCancel
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) Expect(ctx context.Context, in *mm_pb.OrderCancelRequest, opts ...grpc.CallOption) *mLomsServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &LomsServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.paramPtrs != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by ExpectParams functions")
	}

	mmOrderCancel.defaultExpectation.params = &LomsServiceClientMockOrderCancelParams{ctx, in, opts}
	mmOrderCancel.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderCancel.expectations {
		if minimock.Equal(e.params, mmOrderCancel.defaultExpectation.params) {
			mmOrderCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCancel.defaultExpectation.params)
		}
	}

	return mmOrderCancel
}

// ExpectCtxParam1 sets up expected param ctx for LomsServiceClient.OrderCancel
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) ExpectCtxParam1(ctx context.Context) *mLomsServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &LomsServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderCancel.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderCancel
}

// ExpectInParam2 sets up expected param in for LomsServiceClient.OrderCancel
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) ExpectInParam2(in *mm_pb.OrderCancelRequest) *mLomsServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &LomsServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.in = &in
	mmOrderCancel.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderCancel
}

// ExpectOptsParam3 sets up expected param opts for LomsServiceClient.OrderCancel
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) ExpectOptsParam3(opts ...grpc.CallOption) *mLomsServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &LomsServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.opts = &opts
	mmOrderCancel.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderCancel
}

// Inspect accepts an inspector function that has same arguments as the LomsServiceClient.OrderCancel
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) Inspect(f func(ctx context.Context, in *mm_pb.OrderCancelRequest, opts ...grpc.CallOption)) *mLomsServiceClientMockOrderCancel {
	if mmOrderCancel.mock.inspectFuncOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("Inspect function is already set for LomsServiceClientMock.OrderCancel")
	}

	mmOrderCancel.mock.inspectFuncOrderCancel = f

	return mmOrderCancel
}

// Return sets up results that will be returned by LomsServiceClient.OrderCancel
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) Return(op1 *mm_pb.OrderCancelResponse, err error) *LomsServiceClientMock {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &LomsServiceClientMockOrderCancelExpectation{mock: mmOrderCancel.mock}
	}
	mmOrderCancel.defaultExpectation.results = &LomsServiceClientMockOrderCancelResults{op1, err}
	mmOrderCancel.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderCancel.mock
}

// Set uses given function f to mock the LomsServiceClient.OrderCancel method
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) Set(f func(ctx context.Context, in *mm_pb.OrderCancelRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderCancelResponse, err error)) *LomsServiceClientMock {
	if mmOrderCancel.defaultExpectation != nil {
		mmOrderCancel.mock.t.Fatalf("Default expectation is already set for the LomsServiceClient.OrderCancel method")
	}

	if len(mmOrderCancel.expectations) > 0 {
		mmOrderCancel.mock.t.Fatalf("Some expectations are already set for the LomsServiceClient.OrderCancel method")
	}

	mmOrderCancel.mock.funcOrderCancel = f
	mmOrderCancel.mock.funcOrderCancelOrigin = minimock.CallerInfo(1)
	return mmOrderCancel.mock
}

// When sets expectation for the LomsServiceClient.OrderCancel which will trigger the result defined by the following
// Then helper
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) When(ctx context.Context, in *mm_pb.OrderCancelRequest, opts ...grpc.CallOption) *LomsServiceClientMockOrderCancelExpectation {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("LomsServiceClientMock.OrderCancel mock is already set by Set")
	}

	expectation := &LomsServiceClientMockOrderCancelExpectation{
		mock:               mmOrderCancel.mock,
		params:             &LomsServiceClientMockOrderCancelParams{ctx, in, opts},
		expectationOrigins: LomsServiceClientMockOrderCancelExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderCancel.expectations = append(mmOrderCancel.expectations, expectation)
	return expectation
}

// Then sets up LomsServiceClient.OrderCancel return parameters for the expectation previously defined by the When method
func (e *LomsServiceClientMockOrderCancelExpectation) Then(op1 *mm_pb.OrderCancelResponse, err error) *LomsServiceClientMock {
	e.results = &LomsServiceClientMockOrderCancelResults{op1, err}
	return e.mock
}

// Times sets number of times LomsServiceClient.OrderCancel should be invoked
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) Times(n uint64) *mLomsServiceClientMockOrderCancel {
	if n == 0 {
		mmOrderCancel.mock.t.Fatalf("Times of LomsServiceClientMock.OrderCancel mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderCancel.expectedInvocations, n)
	mmOrderCancel.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderCancel
}

func (mmOrderCancel *mLomsServiceClientMockOrderCancel) invocationsDone() bool {
	if len(mmOrderCancel.expectations) == 0 && mmOrderCancel.defaultExpectation == nil && mmOrderCancel.mock.funcOrderCancel == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderCancel.mock.afterOrderCancelCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderCancel.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderCancel implements mm_pb.LomsServiceClient
func (mmOrderCancel *LomsServiceClientMock) OrderCancel(ctx context.Context, in *mm_pb.OrderCancelRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderCancelResponse, err error) {
	mm_atomic.AddUint64(&mmOrderCancel.beforeOrderCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCancel.afterOrderCancelCounter, 1)

	mmOrderCancel.t.Helper()

	if mmOrderCancel.inspectFuncOrderCancel != nil {
		mmOrderCancel.inspectFuncOrderCancel(ctx, in, opts...)
	}

	mm_params := LomsServiceClientMockOrderCancelParams{ctx, in, opts}

	// Record call args
	mmOrderCancel.OrderCancelMock.mutex.Lock()
	mmOrderCancel.OrderCancelMock.callArgs = append(mmOrderCancel.OrderCancelMock.callArgs, &mm_params)
	mmOrderCancel.OrderCancelMock.mutex.Unlock()

	for _, e := range mmOrderCancel.OrderCancelMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderCancel.OrderCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCancel.OrderCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCancel.OrderCancelMock.defaultExpectation.params
		mm_want_ptrs := mmOrderCancel.OrderCancelMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceClientMockOrderCancelParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderCancel.t.Errorf("LomsServiceClientMock.OrderCancel got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderCancel.t.Errorf("LomsServiceClientMock.OrderCancel got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderCancel.t.Errorf("LomsServiceClientMock.OrderCancel got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCancel.t.Errorf("LomsServiceClientMock.OrderCancel got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCancel.OrderCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCancel.t.Fatal("No results are set for the LomsServiceClientMock.OrderCancel")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderCancel.funcOrderCancel != nil {
		return mmOrderCancel.funcOrderCancel(ctx, in, opts...)
	}
	mmOrderCancel.t.Fatalf("Unexpected call to LomsServiceClientMock.OrderCancel. %v %v %v", ctx, in, opts)
	return
}

// OrderCancelAfterCounter returns a count of finished LomsServiceClientMock.OrderCancel invocations
func (mmOrderCancel *LomsServiceClientMock) OrderCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCancel.afterOrderCancelCounter)
}

// OrderCancelBeforeCounter returns a count of LomsServiceClientMock.OrderCancel invocations
func (mmOrderCancel *LomsServiceClientMock) OrderCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCancel.beforeOrderCancelCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceClientMock.OrderCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCancel *mLomsServiceClientMockOrderCancel) Calls() []*LomsServiceClientMockOrderCancelParams {
	mmOrderCancel.mutex.RLock()

	argCopy := make([]*LomsServiceClientMockOrderCancelParams, len(mmOrderCancel.callArgs))
	copy(argCopy, mmOrderCancel.callArgs)

	mmOrderCancel.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCancelDone returns true if the count of the OrderCancel invocations corresponds
// the number of defined expectations
func (m *LomsServiceClientMock) MinimockOrderCancelDone() bool {
	if m.OrderCancelMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderCancelMock.invocationsDone()
}

// MinimockOrderCancelInspect logs each unmet expectation
func (m *LomsServiceClientMock) MinimockOrderCancelInspect() {
	for _, e := range m.OrderCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderCancel at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderCancelCounter := mm_atomic.LoadUint64(&m.afterOrderCancelCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCancelMock.defaultExpectation != nil && afterOrderCancelCounter < 1 {
		if m.OrderCancelMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderCancel at\n%s", m.OrderCancelMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderCancel at\n%s with params: %#v", m.OrderCancelMock.defaultExpectation.expectationOrigins.origin, *m.OrderCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCancel != nil && afterOrderCancelCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceClientMock.OrderCancel at\n%s", m.funcOrderCancelOrigin)
	}

	if !m.OrderCancelMock.invocationsDone() && afterOrderCancelCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceClientMock.OrderCancel at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderCancelMock.expectedInvocations), m.OrderCancelMock.expectedInvocationsOrigin, afterOrderCancelCounter)
	}
}

type mLomsServiceClientMockOrderCreate struct {
	optional           bool
	mock               *LomsServiceClientMock
	defaultExpectation *LomsServiceClientMockOrderCreateExpectation
	expectations       []*LomsServiceClientMockOrderCreateExpectation

	callArgs []*LomsServiceClientMockOrderCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceClientMockOrderCreateExpectation specifies expectation struct of the LomsServiceClient.OrderCreate
type LomsServiceClientMockOrderCreateExpectation struct {
	mock               *LomsServiceClientMock
	params             *LomsServiceClientMockOrderCreateParams
	paramPtrs          *LomsServiceClientMockOrderCreateParamPtrs
	expectationOrigins LomsServiceClientMockOrderCreateExpectationOrigins
	results            *LomsServiceClientMockOrderCreateResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceClientMockOrderCreateParams contains parameters of the LomsServiceClient.OrderCreate
type LomsServiceClientMockOrderCreateParams struct {
	ctx  context.Context
	in   *mm_pb.OrderCreateRequest
	opts []grpc.CallOption
}

// LomsServiceClientMockOrderCreateParamPtrs contains pointers to parameters of the LomsServiceClient.OrderCreate
type LomsServiceClientMockOrderCreateParamPtrs struct {
	ctx  *context.Context
	in   **mm_pb.OrderCreateRequest
	opts *[]grpc.CallOption
}

// LomsServiceClientMockOrderCreateResults contains results of the LomsServiceClient.OrderCreate
type LomsServiceClientMockOrderCreateResults struct {
	op1 *mm_pb.OrderCreateResponse
	err error
}

// LomsServiceClientMockOrderCreateOrigins contains origins of expectations of the LomsServiceClient.OrderCreate
type LomsServiceClientMockOrderCreateExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) Optional() *mLomsServiceClientMockOrderCreate {
	mmOrderCreate.optional = true
	return mmOrderCreate
}

// Expect sets up expected params for LomsServiceClient.OrderCreate
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) Expect(ctx context.Context, in *mm_pb.OrderCreateRequest, opts ...grpc.CallOption) *mLomsServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &LomsServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.paramPtrs != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by ExpectParams functions")
	}

	mmOrderCreate.defaultExpectation.params = &LomsServiceClientMockOrderCreateParams{ctx, in, opts}
	mmOrderCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderCreate.expectations {
		if minimock.Equal(e.params, mmOrderCreate.defaultExpectation.params) {
			mmOrderCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCreate.defaultExpectation.params)
		}
	}

	return mmOrderCreate
}

// ExpectCtxParam1 sets up expected param ctx for LomsServiceClient.OrderCreate
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) ExpectCtxParam1(ctx context.Context) *mLomsServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &LomsServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderCreate
}

// ExpectInParam2 sets up expected param in for LomsServiceClient.OrderCreate
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) ExpectInParam2(in *mm_pb.OrderCreateRequest) *mLomsServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &LomsServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.in = &in
	mmOrderCreate.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderCreate
}

// ExpectOptsParam3 sets up expected param opts for LomsServiceClient.OrderCreate
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) ExpectOptsParam3(opts ...grpc.CallOption) *mLomsServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &LomsServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.opts = &opts
	mmOrderCreate.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderCreate
}

// Inspect accepts an inspector function that has same arguments as the LomsServiceClient.OrderCreate
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) Inspect(f func(ctx context.Context, in *mm_pb.OrderCreateRequest, opts ...grpc.CallOption)) *mLomsServiceClientMockOrderCreate {
	if mmOrderCreate.mock.inspectFuncOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("Inspect function is already set for LomsServiceClientMock.OrderCreate")
	}

	mmOrderCreate.mock.inspectFuncOrderCreate = f

	return mmOrderCreate
}

// Return sets up results that will be returned by LomsServiceClient.OrderCreate
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) Return(op1 *mm_pb.OrderCreateResponse, err error) *LomsServiceClientMock {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &LomsServiceClientMockOrderCreateExpectation{mock: mmOrderCreate.mock}
	}
	mmOrderCreate.defaultExpectation.results = &LomsServiceClientMockOrderCreateResults{op1, err}
	mmOrderCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderCreate.mock
}

// Set uses given function f to mock the LomsServiceClient.OrderCreate method
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) Set(f func(ctx context.Context, in *mm_pb.OrderCreateRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderCreateResponse, err error)) *LomsServiceClientMock {
	if mmOrderCreate.defaultExpectation != nil {
		mmOrderCreate.mock.t.Fatalf("Default expectation is already set for the LomsServiceClient.OrderCreate method")
	}

	if len(mmOrderCreate.expectations) > 0 {
		mmOrderCreate.mock.t.Fatalf("Some expectations are already set for the LomsServiceClient.OrderCreate method")
	}

	mmOrderCreate.mock.funcOrderCreate = f
	mmOrderCreate.mock.funcOrderCreateOrigin = minimock.CallerInfo(1)
	return mmOrderCreate.mock
}

// When sets expectation for the LomsServiceClient.OrderCreate which will trigger the result defined by the following
// Then helper
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) When(ctx context.Context, in *mm_pb.OrderCreateRequest, opts ...grpc.CallOption) *LomsServiceClientMockOrderCreateExpectation {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsServiceClientMock.OrderCreate mock is already set by Set")
	}

	expectation := &LomsServiceClientMockOrderCreateExpectation{
		mock:               mmOrderCreate.mock,
		params:             &LomsServiceClientMockOrderCreateParams{ctx, in, opts},
		expectationOrigins: LomsServiceClientMockOrderCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderCreate.expectations = append(mmOrderCreate.expectations, expectation)
	return expectation
}

// Then sets up LomsServiceClient.OrderCreate return parameters for the expectation previously defined by the When method
func (e *LomsServiceClientMockOrderCreateExpectation) Then(op1 *mm_pb.OrderCreateResponse, err error) *LomsServiceClientMock {
	e.results = &LomsServiceClientMockOrderCreateResults{op1, err}
	return e.mock
}

// Times sets number of times LomsServiceClient.OrderCreate should be invoked
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) Times(n uint64) *mLomsServiceClientMockOrderCreate {
	if n == 0 {
		mmOrderCreate.mock.t.Fatalf("Times of LomsServiceClientMock.OrderCreate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderCreate.expectedInvocations, n)
	mmOrderCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderCreate
}

func (mmOrderCreate *mLomsServiceClientMockOrderCreate) invocationsDone() bool {
	if len(mmOrderCreate.expectations) == 0 && mmOrderCreate.defaultExpectation == nil && mmOrderCreate.mock.funcOrderCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderCreate.mock.afterOrderCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderCreate implements mm_pb.LomsServiceClient
func (mmOrderCreate *LomsServiceClientMock) OrderCreate(ctx context.Context, in *mm_pb.OrderCreateRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderCreateResponse, err error) {
	mm_atomic.AddUint64(&mmOrderCreate.beforeOrderCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCreate.afterOrderCreateCounter, 1)

	mmOrderCreate.t.Helper()

	if mmOrderCreate.inspectFuncOrderCreate != nil {
		mmOrderCreate.inspectFuncOrderCreate(ctx, in, opts...)
	}

	mm_params := LomsServiceClientMockOrderCreateParams{ctx, in, opts}

	// Record call args
	mmOrderCreate.OrderCreateMock.mutex.Lock()
	mmOrderCreate.OrderCreateMock.callArgs = append(mmOrderCreate.OrderCreateMock.callArgs, &mm_params)
	mmOrderCreate.OrderCreateMock.mutex.Unlock()

	for _, e := range mmOrderCreate.OrderCreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderCreate.OrderCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCreate.OrderCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCreate.OrderCreateMock.defaultExpectation.params
		mm_want_ptrs := mmOrderCreate.OrderCreateMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceClientMockOrderCreateParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderCreate.t.Errorf("LomsServiceClientMock.OrderCreate got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderCreate.t.Errorf("LomsServiceClientMock.OrderCreate got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderCreate.t.Errorf("LomsServiceClientMock.OrderCreate got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCreate.t.Errorf("LomsServiceClientMock.OrderCreate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCreate.OrderCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCreate.t.Fatal("No results are set for the LomsServiceClientMock.OrderCreate")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderCreate.funcOrderCreate != nil {
		return mmOrderCreate.funcOrderCreate(ctx, in, opts...)
	}
	mmOrderCreate.t.Fatalf("Unexpected call to LomsServiceClientMock.OrderCreate. %v %v %v", ctx, in, opts)
	return
}

// OrderCreateAfterCounter returns a count of finished LomsServiceClientMock.OrderCreate invocations
func (mmOrderCreate *LomsServiceClientMock) OrderCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.afterOrderCreateCounter)
}

// OrderCreateBeforeCounter returns a count of LomsServiceClientMock.OrderCreate invocations
func (mmOrderCreate *LomsServiceClientMock) OrderCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.beforeOrderCreateCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceClientMock.OrderCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCreate *mLomsServiceClientMockOrderCreate) Calls() []*LomsServiceClientMockOrderCreateParams {
	mmOrderCreate.mutex.RLock()

	argCopy := make([]*LomsServiceClientMockOrderCreateParams, len(mmOrderCreate.callArgs))
	copy(argCopy, mmOrderCreate.callArgs)

	mmOrderCreate.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCreateDone returns true if the count of the OrderCreate invocations corresponds
// the number of defined expectations
func (m *LomsServiceClientMock) MinimockOrderCreateDone() bool {
	if m.OrderCreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderCreateMock.invocationsDone()
}

// MinimockOrderCreateInspect logs each unmet expectation
func (m *LomsServiceClientMock) MinimockOrderCreateInspect() {
	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderCreate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderCreateCounter := mm_atomic.LoadUint64(&m.afterOrderCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCreateMock.defaultExpectation != nil && afterOrderCreateCounter < 1 {
		if m.OrderCreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderCreate at\n%s", m.OrderCreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderCreate at\n%s with params: %#v", m.OrderCreateMock.defaultExpectation.expectationOrigins.origin, *m.OrderCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCreate != nil && afterOrderCreateCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceClientMock.OrderCreate at\n%s", m.funcOrderCreateOrigin)
	}

	if !m.OrderCreateMock.invocationsDone() && afterOrderCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceClientMock.OrderCreate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderCreateMock.expectedInvocations), m.OrderCreateMock.expectedInvocationsOrigin, afterOrderCreateCounter)
	}
}

type mLomsServiceClientMockOrderInfo struct {
	optional           bool
	mock               *LomsServiceClientMock
	defaultExpectation *LomsServiceClientMockOrderInfoExpectation
	expectations       []*LomsServiceClientMockOrderInfoExpectation

	callArgs []*LomsServiceClientMockOrderInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceClientMockOrderInfoExpectation specifies expectation struct of the LomsServiceClient.OrderInfo
type LomsServiceClientMockOrderInfoExpectation struct {
	mock               *LomsServiceClientMock
	params             *LomsServiceClientMockOrderInfoParams
	paramPtrs          *LomsServiceClientMockOrderInfoParamPtrs
	expectationOrigins LomsServiceClientMockOrderInfoExpectationOrigins
	results            *LomsServiceClientMockOrderInfoResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceClientMockOrderInfoParams contains parameters of the LomsServiceClient.OrderInfo
type LomsServiceClientMockOrderInfoParams struct {
	ctx  context.Context
	in   *mm_pb.OrderInfoRequest
	opts []grpc.CallOption
}

// LomsServiceClientMockOrderInfoParamPtrs contains pointers to parameters of the LomsServiceClient.OrderInfo
type LomsServiceClientMockOrderInfoParamPtrs struct {
	ctx  *context.Context
	in   **mm_pb.OrderInfoRequest
	opts *[]grpc.CallOption
}

// LomsServiceClientMockOrderInfoResults contains results of the LomsServiceClient.OrderInfo
type LomsServiceClientMockOrderInfoResults struct {
	op1 *mm_pb.OrderInfoResponse
	err error
}

// LomsServiceClientMockOrderInfoOrigins contains origins of expectations of the LomsServiceClient.OrderInfo
type LomsServiceClientMockOrderInfoExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) Optional() *mLomsServiceClientMockOrderInfo {
	mmOrderInfo.optional = true
	return mmOrderInfo
}

// Expect sets up expected params for LomsServiceClient.OrderInfo
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) Expect(ctx context.Context, in *mm_pb.OrderInfoRequest, opts ...grpc.CallOption) *mLomsServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &LomsServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.paramPtrs != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by ExpectParams functions")
	}

	mmOrderInfo.defaultExpectation.params = &LomsServiceClientMockOrderInfoParams{ctx, in, opts}
	mmOrderInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderInfo.expectations {
		if minimock.Equal(e.params, mmOrderInfo.defaultExpectation.params) {
			mmOrderInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderInfo.defaultExpectation.params)
		}
	}

	return mmOrderInfo
}

// ExpectCtxParam1 sets up expected param ctx for LomsServiceClient.OrderInfo
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) ExpectCtxParam1(ctx context.Context) *mLomsServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &LomsServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderInfo
}

// ExpectInParam2 sets up expected param in for LomsServiceClient.OrderInfo
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) ExpectInParam2(in *mm_pb.OrderInfoRequest) *mLomsServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &LomsServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.in = &in
	mmOrderInfo.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderInfo
}

// ExpectOptsParam3 sets up expected param opts for LomsServiceClient.OrderInfo
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) ExpectOptsParam3(opts ...grpc.CallOption) *mLomsServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &LomsServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.opts = &opts
	mmOrderInfo.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderInfo
}

// Inspect accepts an inspector function that has same arguments as the LomsServiceClient.OrderInfo
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) Inspect(f func(ctx context.Context, in *mm_pb.OrderInfoRequest, opts ...grpc.CallOption)) *mLomsServiceClientMockOrderInfo {
	if mmOrderInfo.mock.inspectFuncOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("Inspect function is already set for LomsServiceClientMock.OrderInfo")
	}

	mmOrderInfo.mock.inspectFuncOrderInfo = f

	return mmOrderInfo
}

// Return sets up results that will be returned by LomsServiceClient.OrderInfo
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) Return(op1 *mm_pb.OrderInfoResponse, err error) *LomsServiceClientMock {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &LomsServiceClientMockOrderInfoExpectation{mock: mmOrderInfo.mock}
	}
	mmOrderInfo.defaultExpectation.results = &LomsServiceClientMockOrderInfoResults{op1, err}
	mmOrderInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderInfo.mock
}

// Set uses given function f to mock the LomsServiceClient.OrderInfo method
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) Set(f func(ctx context.Context, in *mm_pb.OrderInfoRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderInfoResponse, err error)) *LomsServiceClientMock {
	if mmOrderInfo.defaultExpectation != nil {
		mmOrderInfo.mock.t.Fatalf("Default expectation is already set for the LomsServiceClient.OrderInfo method")
	}

	if len(mmOrderInfo.expectations) > 0 {
		mmOrderInfo.mock.t.Fatalf("Some expectations are already set for the LomsServiceClient.OrderInfo method")
	}

	mmOrderInfo.mock.funcOrderInfo = f
	mmOrderInfo.mock.funcOrderInfoOrigin = minimock.CallerInfo(1)
	return mmOrderInfo.mock
}

// When sets expectation for the LomsServiceClient.OrderInfo which will trigger the result defined by the following
// Then helper
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) When(ctx context.Context, in *mm_pb.OrderInfoRequest, opts ...grpc.CallOption) *LomsServiceClientMockOrderInfoExpectation {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("LomsServiceClientMock.OrderInfo mock is already set by Set")
	}

	expectation := &LomsServiceClientMockOrderInfoExpectation{
		mock:               mmOrderInfo.mock,
		params:             &LomsServiceClientMockOrderInfoParams{ctx, in, opts},
		expectationOrigins: LomsServiceClientMockOrderInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderInfo.expectations = append(mmOrderInfo.expectations, expectation)
	return expectation
}

// Then sets up LomsServiceClient.OrderInfo return parameters for the expectation previously defined by the When method
func (e *LomsServiceClientMockOrderInfoExpectation) Then(op1 *mm_pb.OrderInfoResponse, err error) *LomsServiceClientMock {
	e.results = &LomsServiceClientMockOrderInfoResults{op1, err}
	return e.mock
}

// Times sets number of times LomsServiceClient.OrderInfo should be invoked
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) Times(n uint64) *mLomsServiceClientMockOrderInfo {
	if n == 0 {
		mmOrderInfo.mock.t.Fatalf("Times of LomsServiceClientMock.OrderInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderInfo.expectedInvocations, n)
	mmOrderInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderInfo
}

func (mmOrderInfo *mLomsServiceClientMockOrderInfo) invocationsDone() bool {
	if len(mmOrderInfo.expectations) == 0 && mmOrderInfo.defaultExpectation == nil && mmOrderInfo.mock.funcOrderInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderInfo.mock.afterOrderInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderInfo implements mm_pb.LomsServiceClient
func (mmOrderInfo *LomsServiceClientMock) OrderInfo(ctx context.Context, in *mm_pb.OrderInfoRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderInfoResponse, err error) {
	mm_atomic.AddUint64(&mmOrderInfo.beforeOrderInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderInfo.afterOrderInfoCounter, 1)

	mmOrderInfo.t.Helper()

	if mmOrderInfo.inspectFuncOrderInfo != nil {
		mmOrderInfo.inspectFuncOrderInfo(ctx, in, opts...)
	}

	mm_params := LomsServiceClientMockOrderInfoParams{ctx, in, opts}

	// Record call args
	mmOrderInfo.OrderInfoMock.mutex.Lock()
	mmOrderInfo.OrderInfoMock.callArgs = append(mmOrderInfo.OrderInfoMock.callArgs, &mm_params)
	mmOrderInfo.OrderInfoMock.mutex.Unlock()

	for _, e := range mmOrderInfo.OrderInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderInfo.OrderInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderInfo.OrderInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderInfo.OrderInfoMock.defaultExpectation.params
		mm_want_ptrs := mmOrderInfo.OrderInfoMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceClientMockOrderInfoParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderInfo.t.Errorf("LomsServiceClientMock.OrderInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderInfo.t.Errorf("LomsServiceClientMock.OrderInfo got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderInfo.t.Errorf("LomsServiceClientMock.OrderInfo got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderInfo.t.Errorf("LomsServiceClientMock.OrderInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderInfo.OrderInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderInfo.t.Fatal("No results are set for the LomsServiceClientMock.OrderInfo")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderInfo.funcOrderInfo != nil {
		return mmOrderInfo.funcOrderInfo(ctx, in, opts...)
	}
	mmOrderInfo.t.Fatalf("Unexpected call to LomsServiceClientMock.OrderInfo. %v %v %v", ctx, in, opts)
	return
}

// OrderInfoAfterCounter returns a count of finished LomsServiceClientMock.OrderInfo invocations
func (mmOrderInfo *LomsServiceClientMock) OrderInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderInfo.afterOrderInfoCounter)
}

// OrderInfoBeforeCounter returns a count of LomsServiceClientMock.OrderInfo invocations
func (mmOrderInfo *LomsServiceClientMock) OrderInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderInfo.beforeOrderInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceClientMock.OrderInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderInfo *mLomsServiceClientMockOrderInfo) Calls() []*LomsServiceClientMockOrderInfoParams {
	mmOrderInfo.mutex.RLock()

	argCopy := make([]*LomsServiceClientMockOrderInfoParams, len(mmOrderInfo.callArgs))
	copy(argCopy, mmOrderInfo.callArgs)

	mmOrderInfo.mutex.RUnlock()

	return argCopy
}

// MinimockOrderInfoDone returns true if the count of the OrderInfo invocations corresponds
// the number of defined expectations
func (m *LomsServiceClientMock) MinimockOrderInfoDone() bool {
	if m.OrderInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderInfoMock.invocationsDone()
}

// MinimockOrderInfoInspect logs each unmet expectation
func (m *LomsServiceClientMock) MinimockOrderInfoInspect() {
	for _, e := range m.OrderInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderInfoCounter := mm_atomic.LoadUint64(&m.afterOrderInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderInfoMock.defaultExpectation != nil && afterOrderInfoCounter < 1 {
		if m.OrderInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderInfo at\n%s", m.OrderInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderInfo at\n%s with params: %#v", m.OrderInfoMock.defaultExpectation.expectationOrigins.origin, *m.OrderInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderInfo != nil && afterOrderInfoCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceClientMock.OrderInfo at\n%s", m.funcOrderInfoOrigin)
	}

	if !m.OrderInfoMock.invocationsDone() && afterOrderInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceClientMock.OrderInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderInfoMock.expectedInvocations), m.OrderInfoMock.expectedInvocationsOrigin, afterOrderInfoCounter)
	}
}

type mLomsServiceClientMockOrderPay struct {
	optional           bool
	mock               *LomsServiceClientMock
	defaultExpectation *LomsServiceClientMockOrderPayExpectation
	expectations       []*LomsServiceClientMockOrderPayExpectation

	callArgs []*LomsServiceClientMockOrderPayParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceClientMockOrderPayExpectation specifies expectation struct of the LomsServiceClient.OrderPay
type LomsServiceClientMockOrderPayExpectation struct {
	mock               *LomsServiceClientMock
	params             *LomsServiceClientMockOrderPayParams
	paramPtrs          *LomsServiceClientMockOrderPayParamPtrs
	expectationOrigins LomsServiceClientMockOrderPayExpectationOrigins
	results            *LomsServiceClientMockOrderPayResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceClientMockOrderPayParams contains parameters of the LomsServiceClient.OrderPay
type LomsServiceClientMockOrderPayParams struct {
	ctx  context.Context
	in   *mm_pb.OrderPayRequest
	opts []grpc.CallOption
}

// LomsServiceClientMockOrderPayParamPtrs contains pointers to parameters of the LomsServiceClient.OrderPay
type LomsServiceClientMockOrderPayParamPtrs struct {
	ctx  *context.Context
	in   **mm_pb.OrderPayRequest
	opts *[]grpc.CallOption
}

// LomsServiceClientMockOrderPayResults contains results of the LomsServiceClient.OrderPay
type LomsServiceClientMockOrderPayResults struct {
	op1 *mm_pb.OrderPayResponse
	err error
}

// LomsServiceClientMockOrderPayOrigins contains origins of expectations of the LomsServiceClient.OrderPay
type LomsServiceClientMockOrderPayExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderPay *mLomsServiceClientMockOrderPay) Optional() *mLomsServiceClientMockOrderPay {
	mmOrderPay.optional = true
	return mmOrderPay
}

// Expect sets up expected params for LomsServiceClient.OrderPay
func (mmOrderPay *mLomsServiceClientMockOrderPay) Expect(ctx context.Context, in *mm_pb.OrderPayRequest, opts ...grpc.CallOption) *mLomsServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &LomsServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.paramPtrs != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by ExpectParams functions")
	}

	mmOrderPay.defaultExpectation.params = &LomsServiceClientMockOrderPayParams{ctx, in, opts}
	mmOrderPay.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderPay.expectations {
		if minimock.Equal(e.params, mmOrderPay.defaultExpectation.params) {
			mmOrderPay.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderPay.defaultExpectation.params)
		}
	}

	return mmOrderPay
}

// ExpectCtxParam1 sets up expected param ctx for LomsServiceClient.OrderPay
func (mmOrderPay *mLomsServiceClientMockOrderPay) ExpectCtxParam1(ctx context.Context) *mLomsServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &LomsServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderPay.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderPay
}

// ExpectInParam2 sets up expected param in for LomsServiceClient.OrderPay
func (mmOrderPay *mLomsServiceClientMockOrderPay) ExpectInParam2(in *mm_pb.OrderPayRequest) *mLomsServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &LomsServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.in = &in
	mmOrderPay.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderPay
}

// ExpectOptsParam3 sets up expected param opts for LomsServiceClient.OrderPay
func (mmOrderPay *mLomsServiceClientMockOrderPay) ExpectOptsParam3(opts ...grpc.CallOption) *mLomsServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &LomsServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &LomsServiceClientMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.opts = &opts
	mmOrderPay.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderPay
}

// Inspect accepts an inspector function that has same arguments as the LomsServiceClient.OrderPay
func (mmOrderPay *mLomsServiceClientMockOrderPay) Inspect(f func(ctx context.Context, in *mm_pb.OrderPayRequest, opts ...grpc.CallOption)) *mLomsServiceClientMockOrderPay {
	if mmOrderPay.mock.inspectFuncOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("Inspect function is already set for LomsServiceClientMock.OrderPay")
	}

	mmOrderPay.mock.inspectFuncOrderPay = f

	return mmOrderPay
}

// Return sets up results that will be returned by LomsServiceClient.OrderPay
func (mmOrderPay *mLomsServiceClientMockOrderPay) Return(op1 *mm_pb.OrderPayResponse, err error) *LomsServiceClientMock {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &LomsServiceClientMockOrderPayExpectation{mock: mmOrderPay.mock}
	}
	mmOrderPay.defaultExpectation.results = &LomsServiceClientMockOrderPayResults{op1, err}
	mmOrderPay.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderPay.mock
}

// Set uses given function f to mock the LomsServiceClient.OrderPay method
func (mmOrderPay *mLomsServiceClientMockOrderPay) Set(f func(ctx context.Context, in *mm_pb.OrderPayRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderPayResponse, err error)) *LomsServiceClientMock {
	if mmOrderPay.defaultExpectation != nil {
		mmOrderPay.mock.t.Fatalf("Default expectation is already set for the LomsServiceClient.OrderPay method")
	}

	if len(mmOrderPay.expectations) > 0 {
		mmOrderPay.mock.t.Fatalf("Some expectations are already set for the LomsServiceClient.OrderPay method")
	}

	mmOrderPay.mock.funcOrderPay = f
	mmOrderPay.mock.funcOrderPayOrigin = minimock.CallerInfo(1)
	return mmOrderPay.mock
}

// When sets expectation for the LomsServiceClient.OrderPay which will trigger the result defined by the following
// Then helper
func (mmOrderPay *mLomsServiceClientMockOrderPay) When(ctx context.Context, in *mm_pb.OrderPayRequest, opts ...grpc.CallOption) *LomsServiceClientMockOrderPayExpectation {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("LomsServiceClientMock.OrderPay mock is already set by Set")
	}

	expectation := &LomsServiceClientMockOrderPayExpectation{
		mock:               mmOrderPay.mock,
		params:             &LomsServiceClientMockOrderPayParams{ctx, in, opts},
		expectationOrigins: LomsServiceClientMockOrderPayExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderPay.expectations = append(mmOrderPay.expectations, expectation)
	return expectation
}

// Then sets up LomsServiceClient.OrderPay return parameters for the expectation previously defined by the When method
func (e *LomsServiceClientMockOrderPayExpectation) Then(op1 *mm_pb.OrderPayResponse, err error) *LomsServiceClientMock {
	e.results = &LomsServiceClientMockOrderPayResults{op1, err}
	return e.mock
}

// Times sets number of times LomsServiceClient.OrderPay should be invoked
func (mmOrderPay *mLomsServiceClientMockOrderPay) Times(n uint64) *mLomsServiceClientMockOrderPay {
	if n == 0 {
		mmOrderPay.mock.t.Fatalf("Times of LomsServiceClientMock.OrderPay mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderPay.expectedInvocations, n)
	mmOrderPay.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderPay
}

func (mmOrderPay *mLomsServiceClientMockOrderPay) invocationsDone() bool {
	if len(mmOrderPay.expectations) == 0 && mmOrderPay.defaultExpectation == nil && mmOrderPay.mock.funcOrderPay == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderPay.mock.afterOrderPayCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderPay.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderPay implements mm_pb.LomsServiceClient
func (mmOrderPay *LomsServiceClientMock) OrderPay(ctx context.Context, in *mm_pb.OrderPayRequest, opts ...grpc.CallOption) (op1 *mm_pb.OrderPayResponse, err error) {
	mm_atomic.AddUint64(&mmOrderPay.beforeOrderPayCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderPay.afterOrderPayCounter, 1)

	mmOrderPay.t.Helper()

	if mmOrderPay.inspectFuncOrderPay != nil {
		mmOrderPay.inspectFuncOrderPay(ctx, in, opts...)
	}

	mm_params := LomsServiceClientMockOrderPayParams{ctx, in, opts}

	// Record call args
	mmOrderPay.OrderPayMock.mutex.Lock()
	mmOrderPay.OrderPayMock.callArgs = append(mmOrderPay.OrderPayMock.callArgs, &mm_params)
	mmOrderPay.OrderPayMock.mutex.Unlock()

	for _, e := range mmOrderPay.OrderPayMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderPay.OrderPayMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderPay.OrderPayMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderPay.OrderPayMock.defaultExpectation.params
		mm_want_ptrs := mmOrderPay.OrderPayMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceClientMockOrderPayParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderPay.t.Errorf("LomsServiceClientMock.OrderPay got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderPay.t.Errorf("LomsServiceClientMock.OrderPay got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderPay.t.Errorf("LomsServiceClientMock.OrderPay got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderPay.t.Errorf("LomsServiceClientMock.OrderPay got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderPay.OrderPayMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderPay.t.Fatal("No results are set for the LomsServiceClientMock.OrderPay")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderPay.funcOrderPay != nil {
		return mmOrderPay.funcOrderPay(ctx, in, opts...)
	}
	mmOrderPay.t.Fatalf("Unexpected call to LomsServiceClientMock.OrderPay. %v %v %v", ctx, in, opts)
	return
}

// OrderPayAfterCounter returns a count of finished LomsServiceClientMock.OrderPay invocations
func (mmOrderPay *LomsServiceClientMock) OrderPayAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPay.afterOrderPayCounter)
}

// OrderPayBeforeCounter returns a count of LomsServiceClientMock.OrderPay invocations
func (mmOrderPay *LomsServiceClientMock) OrderPayBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPay.beforeOrderPayCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceClientMock.OrderPay.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderPay *mLomsServiceClientMockOrderPay) Calls() []*LomsServiceClientMockOrderPayParams {
	mmOrderPay.mutex.RLock()

	argCopy := make([]*LomsServiceClientMockOrderPayParams, len(mmOrderPay.callArgs))
	copy(argCopy, mmOrderPay.callArgs)

	mmOrderPay.mutex.RUnlock()

	return argCopy
}

// MinimockOrderPayDone returns true if the count of the OrderPay invocations corresponds
// the number of defined expectations
func (m *LomsServiceClientMock) MinimockOrderPayDone() bool {
	if m.OrderPayMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderPayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderPayMock.invocationsDone()
}

// MinimockOrderPayInspect logs each unmet expectation
func (m *LomsServiceClientMock) MinimockOrderPayInspect() {
	for _, e := range m.OrderPayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderPay at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderPayCounter := mm_atomic.LoadUint64(&m.afterOrderPayCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderPayMock.defaultExpectation != nil && afterOrderPayCounter < 1 {
		if m.OrderPayMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderPay at\n%s", m.OrderPayMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceClientMock.OrderPay at\n%s with params: %#v", m.OrderPayMock.defaultExpectation.expectationOrigins.origin, *m.OrderPayMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderPay != nil && afterOrderPayCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceClientMock.OrderPay at\n%s", m.funcOrderPayOrigin)
	}

	if !m.OrderPayMock.invocationsDone() && afterOrderPayCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceClientMock.OrderPay at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderPayMock.expectedInvocations), m.OrderPayMock.expectedInvocationsOrigin, afterOrderPayCounter)
	}
}

type mLomsServiceClientMockStocksInfo struct {
	optional           bool
	mock               *LomsServiceClientMock
	defaultExpectation *LomsServiceClientMockStocksInfoExpectation
	expectations       []*LomsServiceClientMockStocksInfoExpectation

	callArgs []*LomsServiceClientMockStocksInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceClientMockStocksInfoExpectation specifies expectation struct of the LomsServiceClient.StocksInfo
type LomsServiceClientMockStocksInfoExpectation struct {
	mock               *LomsServiceClientMock
	params             *LomsServiceClientMockStocksInfoParams
	paramPtrs          *LomsServiceClientMockStocksInfoParamPtrs
	expectationOrigins LomsServiceClientMockStocksInfoExpectationOrigins
	results            *LomsServiceClientMockStocksInfoResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceClientMockStocksInfoParams contains parameters of the LomsServiceClient.StocksInfo
type LomsServiceClientMockStocksInfoParams struct {
	ctx  context.Context
	in   *mm_pb.StocksInfoRequest
	opts []grpc.CallOption
}

// LomsServiceClientMockStocksInfoParamPtrs contains pointers to parameters of the LomsServiceClient.StocksInfo
type LomsServiceClientMockStocksInfoParamPtrs struct {
	ctx  *context.Context
	in   **mm_pb.StocksInfoRequest
	opts *[]grpc.CallOption
}

// LomsServiceClientMockStocksInfoResults contains results of the LomsServiceClient.StocksInfo
type LomsServiceClientMockStocksInfoResults struct {
	sp1 *mm_pb.StocksInfoResponse
	err error
}

// LomsServiceClientMockStocksInfoOrigins contains origins of expectations of the LomsServiceClient.StocksInfo
type LomsServiceClientMockStocksInfoExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) Optional() *mLomsServiceClientMockStocksInfo {
	mmStocksInfo.optional = true
	return mmStocksInfo
}

// Expect sets up expected params for LomsServiceClient.StocksInfo
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) Expect(ctx context.Context, in *mm_pb.StocksInfoRequest, opts ...grpc.CallOption) *mLomsServiceClientMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceClientMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.paramPtrs != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by ExpectParams functions")
	}

	mmStocksInfo.defaultExpectation.params = &LomsServiceClientMockStocksInfoParams{ctx, in, opts}
	mmStocksInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStocksInfo.expectations {
		if minimock.Equal(e.params, mmStocksInfo.defaultExpectation.params) {
			mmStocksInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocksInfo.defaultExpectation.params)
		}
	}

	return mmStocksInfo
}

// ExpectCtxParam1 sets up expected param ctx for LomsServiceClient.StocksInfo
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) ExpectCtxParam1(ctx context.Context) *mLomsServiceClientMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceClientMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &LomsServiceClientMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmStocksInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmStocksInfo
}

// ExpectInParam2 sets up expected param in for LomsServiceClient.StocksInfo
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) ExpectInParam2(in *mm_pb.StocksInfoRequest) *mLomsServiceClientMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceClientMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &LomsServiceClientMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.in = &in
	mmStocksInfo.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmStocksInfo
}

// ExpectOptsParam3 sets up expected param opts for LomsServiceClient.StocksInfo
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) ExpectOptsParam3(opts ...grpc.CallOption) *mLomsServiceClientMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceClientMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &LomsServiceClientMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.opts = &opts
	mmStocksInfo.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmStocksInfo
}

// Inspect accepts an inspector function that has same arguments as the LomsServiceClient.StocksInfo
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) Inspect(f func(ctx context.Context, in *mm_pb.StocksInfoRequest, opts ...grpc.CallOption)) *mLomsServiceClientMockStocksInfo {
	if mmStocksInfo.mock.inspectFuncStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("Inspect function is already set for LomsServiceClientMock.StocksInfo")
	}

	mmStocksInfo.mock.inspectFuncStocksInfo = f

	return mmStocksInfo
}

// Return sets up results that will be returned by LomsServiceClient.StocksInfo
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) Return(sp1 *mm_pb.StocksInfoResponse, err error) *LomsServiceClientMock {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceClientMockStocksInfoExpectation{mock: mmStocksInfo.mock}
	}
	mmStocksInfo.defaultExpectation.results = &LomsServiceClientMockStocksInfoResults{sp1, err}
	mmStocksInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStocksInfo.mock
}

// Set uses given function f to mock the LomsServiceClient.StocksInfo method
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) Set(f func(ctx context.Context, in *mm_pb.StocksInfoRequest, opts ...grpc.CallOption) (sp1 *mm_pb.StocksInfoResponse, err error)) *LomsServiceClientMock {
	if mmStocksInfo.defaultExpectation != nil {
		mmStocksInfo.mock.t.Fatalf("Default expectation is already set for the LomsServiceClient.StocksInfo method")
	}

	if len(mmStocksInfo.expectations) > 0 {
		mmStocksInfo.mock.t.Fatalf("Some expectations are already set for the LomsServiceClient.StocksInfo method")
	}

	mmStocksInfo.mock.funcStocksInfo = f
	mmStocksInfo.mock.funcStocksInfoOrigin = minimock.CallerInfo(1)
	return mmStocksInfo.mock
}

// When sets expectation for the LomsServiceClient.StocksInfo which will trigger the result defined by the following
// Then helper
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) When(ctx context.Context, in *mm_pb.StocksInfoRequest, opts ...grpc.CallOption) *LomsServiceClientMockStocksInfoExpectation {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceClientMock.StocksInfo mock is already set by Set")
	}

	expectation := &LomsServiceClientMockStocksInfoExpectation{
		mock:               mmStocksInfo.mock,
		params:             &LomsServiceClientMockStocksInfoParams{ctx, in, opts},
		expectationOrigins: LomsServiceClientMockStocksInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStocksInfo.expectations = append(mmStocksInfo.expectations, expectation)
	return expectation
}

// Then sets up LomsServiceClient.StocksInfo return parameters for the expectation previously defined by the When method
func (e *LomsServiceClientMockStocksInfoExpectation) Then(sp1 *mm_pb.StocksInfoResponse, err error) *LomsServiceClientMock {
	e.results = &LomsServiceClientMockStocksInfoResults{sp1, err}
	return e.mock
}

// Times sets number of times LomsServiceClient.StocksInfo should be invoked
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) Times(n uint64) *mLomsServiceClientMockStocksInfo {
	if n == 0 {
		mmStocksInfo.mock.t.Fatalf("Times of LomsServiceClientMock.StocksInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStocksInfo.expectedInvocations, n)
	mmStocksInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStocksInfo
}

func (mmStocksInfo *mLomsServiceClientMockStocksInfo) invocationsDone() bool {
	if len(mmStocksInfo.expectations) == 0 && mmStocksInfo.defaultExpectation == nil && mmStocksInfo.mock.funcStocksInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStocksInfo.mock.afterStocksInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStocksInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StocksInfo implements mm_pb.LomsServiceClient
func (mmStocksInfo *LomsServiceClientMock) StocksInfo(ctx context.Context, in *mm_pb.StocksInfoRequest, opts ...grpc.CallOption) (sp1 *mm_pb.StocksInfoResponse, err error) {
	mm_atomic.AddUint64(&mmStocksInfo.beforeStocksInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStocksInfo.afterStocksInfoCounter, 1)

	mmStocksInfo.t.Helper()

	if mmStocksInfo.inspectFuncStocksInfo != nil {
		mmStocksInfo.inspectFuncStocksInfo(ctx, in, opts...)
	}

	mm_params := LomsServiceClientMockStocksInfoParams{ctx, in, opts}

	// Record call args
	mmStocksInfo.StocksInfoMock.mutex.Lock()
	mmStocksInfo.StocksInfoMock.callArgs = append(mmStocksInfo.StocksInfoMock.callArgs, &mm_params)
	mmStocksInfo.StocksInfoMock.mutex.Unlock()

	for _, e := range mmStocksInfo.StocksInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmStocksInfo.StocksInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocksInfo.StocksInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStocksInfo.StocksInfoMock.defaultExpectation.params
		mm_want_ptrs := mmStocksInfo.StocksInfoMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceClientMockStocksInfoParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStocksInfo.t.Errorf("LomsServiceClientMock.StocksInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmStocksInfo.t.Errorf("LomsServiceClientMock.StocksInfo got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmStocksInfo.t.Errorf("LomsServiceClientMock.StocksInfo got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocksInfo.t.Errorf("LomsServiceClientMock.StocksInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocksInfo.StocksInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStocksInfo.t.Fatal("No results are set for the LomsServiceClientMock.StocksInfo")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmStocksInfo.funcStocksInfo != nil {
		return mmStocksInfo.funcStocksInfo(ctx, in, opts...)
	}
	mmStocksInfo.t.Fatalf("Unexpected call to LomsServiceClientMock.StocksInfo. %v %v %v", ctx, in, opts)
	return
}

// StocksInfoAfterCounter returns a count of finished LomsServiceClientMock.StocksInfo invocations
func (mmStocksInfo *LomsServiceClientMock) StocksInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.afterStocksInfoCounter)
}

// StocksInfoBeforeCounter returns a count of LomsServiceClientMock.StocksInfo invocations
func (mmStocksInfo *LomsServiceClientMock) StocksInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.beforeStocksInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceClientMock.StocksInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocksInfo *mLomsServiceClientMockStocksInfo) Calls() []*LomsServiceClientMockStocksInfoParams {
	mmStocksInfo.mutex.RLock()

	argCopy := make([]*LomsServiceClientMockStocksInfoParams, len(mmStocksInfo.callArgs))
	copy(argCopy, mmStocksInfo.callArgs)

	mmStocksInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStocksInfoDone returns true if the count of the StocksInfo invocations corresponds
// the number of defined expectations
func (m *LomsServiceClientMock) MinimockStocksInfoDone() bool {
	if m.StocksInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StocksInfoMock.invocationsDone()
}

// MinimockStocksInfoInspect logs each unmet expectation
func (m *LomsServiceClientMock) MinimockStocksInfoInspect() {
	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceClientMock.StocksInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStocksInfoCounter := mm_atomic.LoadUint64(&m.afterStocksInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StocksInfoMock.defaultExpectation != nil && afterStocksInfoCounter < 1 {
		if m.StocksInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceClientMock.StocksInfo at\n%s", m.StocksInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceClientMock.StocksInfo at\n%s with params: %#v", m.StocksInfoMock.defaultExpectation.expectationOrigins.origin, *m.StocksInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocksInfo != nil && afterStocksInfoCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceClientMock.StocksInfo at\n%s", m.funcStocksInfoOrigin)
	}

	if !m.StocksInfoMock.invocationsDone() && afterStocksInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceClientMock.StocksInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StocksInfoMock.expectedInvocations), m.StocksInfoMock.expectedInvocationsOrigin, afterStocksInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsServiceClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOrderCancelInspect()

			m.MinimockOrderCreateInspect()

			m.MinimockOrderInfoInspect()

			m.MinimockOrderPayInspect()

			m.MinimockStocksInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOrderCancelDone() &&
		m.MinimockOrderCreateDone() &&
		m.MinimockOrderInfoDone() &&
		m.MinimockOrderPayDone() &&
		m.MinimockStocksInfoDone()
}
